这里使用了基础的讲解了
Struct的使用
Struct String()
fmt.Println
fmt.Sprintf
接口的使用
包的管理
第三包的使用
使用 npcs
types 定义类型
npcs.go 进行为 types.Struct types.Func 进行添加组合方法
字符串的使用方式

##介绍
https://122.51.193.134/?p=308#respond
https://app.wercker.com/sin/hello/environment
https://github.com/cloudnativego/go-primer/tree/master/npcs


//--仓库处理

docker run -p 8085:8080 cloudnativego/book-hello
https://hub.docker.com/r/cloudnativego/book-hello/tags


//删除对应的docker运行的容器和镜像

docker rm $(docker ps -a -q )
docker rmi $(docker images -a -q)


与Wercher持续集成

1.0维护代码仓库 github gitlab
2.0 自动化构建 配置自动化构建
3.0 使构建自动化测试 测试驱动开发不应只是偶尔采用的方式  所有的测试代码必须使用自动化测试脚本进行测试
4.0 每天向主分支库提交代码 都会触发对应的CI/CD的测试报告 代码检测报告 内存泄漏的检测 检测通过分发到对应的仓库中去
5.0 每个提交都执行构建
6.0 保持构建的速度 我不再使用 DaoCloude 是因为构建的速度和测试的速度和发布的速度 自己本身的私有仓库地址 发布对应的机集群主机处理
7.0 在生产环境中测试
8.0 易于获得交付的成果 本书将展示实现
9.0 每个人都可以看到最新的构建结果
10.0 自动部署

#2.0 为什么使用 Wercker

所有的CI工具 构建全部在云端构建

通过Wercker 搭建CI环境 只需三个步骤
1.0 在Wercker 网站中创建一个应用程序 https://app.wercker.com/sin/hello/runs 地址 ->绑定 giuthb.com/仓库地址
2.0 在wercker.yaml 添加到应用程序的代码库中 github.com/sjfxy/hello wercker.yaml
3.0 选择打包和部署构建的位置

#安装 wercker-cli
https://devcenter.wercker.com/development/cli/installation/

#git 代码仓库准备好
# daoCloud Wercker CI CD 平台准备好
# docker.hub 账户准备好 私有仓库准备好
#  部署的云平台准备好
# 本地测试部署环境准备好
# 本地可以是测试服务器进行 准备好 git wercker-cli 本地的去docker 环境即可
#自动部署和测试
#很多的云的构建

https://github.com/wercker/ 对应的git仓库

https://github.com/wercker/getting-started-php  --对应的php的部署 支持yaml的写法如下

php nodejs java golang js 的写法参考对应的 wercker即可








